#!/usr/bin/env python3

import rospy
from sensor_msgs.msg import JointState

import numpy as np
from numpy.linalg import pinv
from copy import copy

from markers import *
from functions import *

if __name__ == '__main__':

 # Initialize the node
 rospy.init_node("testKinematicControlPosition")
 print('starting motion ... ')
 # Publisher: publish to the joint_states topic
 pub = rospy.Publisher('joint_states', JointState, queue_size=10)
 # Files for the logs
 fxcurrent = open("/home/user/xcurrent.txt", "w")                
 fxdesired = open("/home/user/xdesired.txt", "w")
 fq = open("/home/user/q.txt", "w")

 # Markers for the current and desired positions
 bmarker_current  = BallMarker(color['RED'])
 bmarker_desired = BallMarker(color['GREEN'])

 # Joint names
 jnames = ['motor1', 'motor2', 'motor3', 'motor4', 'motor5', 'motor6']

 # Desired position
 xd = np.array([0.0, 0.7, 0.7])
 # Initial configuration
 q0 = np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0])

 # Resulting initial position (end effector with respect to the base link)
 T = fkine(q0)
 x0 = T[0:3,3]

 # Red marker shows the achieved position
 bmarker_current.xyz(x0)
 # Green marker shows the desired position
 bmarker_desired.xyz(xd)

 # Instance of the JointState message
 jstate = JointState()
 # Values of the message
 jstate.header.stamp = rospy.Time.now()
 jstate.name = jnames
 # Add the head joint value (with value 0) to the joints
 jstate.position = q0

 # Frequency (in Hz) and control period 
 freq = 50.0
 dt = 1.0/freq
 rate = rospy.Rate(freq)
 delta = 0.0001

 # Control gain
 k = 0.05
 
 # Initial joint configuration
 q = copy(q0)

 # Main loop
 for _ in range (300):
  # Current time (needed for ROS)
  jstate.header.stamp = rospy.Time.now()
  # Kinematic control law for position (complete here)
  # -----------------------------

  T = fkine(q)
  x = T[0:3,3]
  e = x - xd
  J = jacobian_position(q)
  de = -k * e
  dq = np.linalg.pinv(J) @ de
  q = q + dt * dq 

  # -----------------------------
        
  # Log values                                                      
  fxcurrent.write(str(x[0])+' '+str(x[1]) +' '+str(x[2])+'\n')
  fxdesired.write(str(xd[0])+' '+str(xd[1])+' '+str(xd[2])+'\n')
  fq.write(str(q[0])+" "+str(q[1])+" "+str(q[2])+" "+str(q[3])+" "+
           str(q[4])+" "+str(q[5])+"\n")
        
  # Publish the message
  jstate.position = q
  pub.publish(jstate)
  bmarker_desired.xyz(xd)
  bmarker_current.xyz(x)
  # Wait for the next iteration
  rate.sleep()

 print('ending motion ...')

fxcurrent.close()
fxdesired.close()
fq.close()